diff --git a/gcc-8.2.0/libstdc++-v3/libsupc++/atexit_thread.cc b/gcc-8.2.0-new/libstdc++-v3/libsupc++/atexit_thread.cc
index de920d7..1374ff8 100644
--- a/gcc-8.2.0/libstdc++-v3/libsupc++/atexit_thread.cc
+++ b/gcc-8.2.0-new/libstdc++-v3/libsupc++/atexit_thread.cc
@@ -149,14 +149,6 @@ __cxxabiv1::__cxa_thread_atexit (void (*dtor)(void *), void *obj, void */*dso_ha
   new_elt->destructor = dtor;
   new_elt->object = obj;
   new_elt->next = first;
-#ifdef _GLIBCXX_THREAD_ATEXIT_WIN32
-  /* Store the DLL address for a later call to FreeLibrary in new_elt and
-     increment DLL load count.  This blocks the unloading of the DLL
-     before the thread-local dtors have been called.  This does NOT help
-     if FreeLibrary/dlclose is called in excess. */
-  GetModuleHandleExW (GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
-		      (LPCWSTR) dtor, &new_elt->dll);
-#endif
 
   if (__gthread_active_p ())
     __gthread_setspecific (key, new_elt);
diff --git a/gcc-8.2.0/libstdc++-v3/libsupc++/del_opa.cc b/gcc-8.2.0-new/libstdc++-v3/libsupc++/del_opa.cc
index 71f384d..9ebac07 100644
--- a/gcc-8.2.0/libstdc++-v3/libsupc++/del_opa.cc
+++ b/gcc-8.2.0-new/libstdc++-v3/libsupc++/del_opa.cc
@@ -50,7 +50,7 @@ operator delete(void* ptr, std::align_val_t) _GLIBCXX_USE_NOEXCEPT
     || _GLIBCXX_HAVE_MEMALIGN
   std::free (ptr);
 #elif _GLIBCXX_HAVE__ALIGNED_MALLOC
-  _aligned_free (ptr);
+  __mingw_aligned_free (ptr);
 #else
   if (ptr)
     std::free (((void **) ptr)[-1]); // See aligned_alloc in new_opa.cc
diff --git a/gcc-9.2.0/libstdc++-v3/libsupc++/new_opa.cc b/gcc-9.2.0/libstdc++-v3/libsupc++/new_opa.cc
index 0303ecd..65cbded 100644
--- a/gcc-9.2.0/libstdc++-v3/libsupc++/new_opa.cc
+++ b/gcc-9.2.0/libstdc++-v3/libsupc++/new_opa.cc
@@ -49,7 +49,7 @@ using ::aligned_alloc;
 #elif _GLIBCXX_HAVE__ALIGNED_MALLOC
 static inline void*
 aligned_alloc (std::size_t al, std::size_t sz)
-{ return _aligned_malloc(sz, al); }
+{ return __mingw_aligned_malloc(sz, al); }
 #elif _GLIBCXX_HAVE_POSIX_MEMALIGN
 static inline void*
 aligned_alloc (std::size_t al, std::size_t sz)
